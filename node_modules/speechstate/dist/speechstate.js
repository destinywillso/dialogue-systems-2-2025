"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.speechstate = void 0;
const xstate_1 = require("xstate");
const tts_1 = require("./tts");
const asr_1 = require("./asr");
const visemes_1 = require("./visemes");
const getToken_1 = require("./getToken");
const speechstate = (0, xstate_1.setup)({
    types: {},
    actors: {
        audioContext: (0, xstate_1.fromPromise)(() => __awaiter(void 0, void 0, void 0, function* () {
            const audioContext = new AudioContext();
            navigator.mediaDevices
                .getUserMedia({ audio: true })
                .then(function (stream) {
                audioContext.createMediaStreamSource(stream);
            });
            return audioContext;
        })),
        getToken: getToken_1.getToken,
        tts: tts_1.ttsMachine,
        asr: asr_1.asrMachine,
        visemes: visemes_1.visemesMachine,
    },
    actions: {
        spawnTTS: (0, xstate_1.assign)({
            ttsRef: ({ context, spawn }) => {
                return spawn("tts", {
                    id: "ttsRef",
                    input: {
                        azureAuthorizationToken: context.azureAuthorizationToken,
                        ttsDefaultVoice: context.settings.ttsDefaultVoice,
                        ttsDefaultFillerDelay: context.settings.ttsDefaultFillerDelay,
                        ttsDefaultFiller: context.settings.ttsDefaultFiller,
                        ttsLexicon: context.settings.ttsLexicon,
                        audioContext: context.audioContext,
                        azureRegion: context.settings.azureRegion,
                        locale: context.settings.locale,
                    },
                });
            },
        }),
        spawnASR: (0, xstate_1.assign)({
            asrRef: ({ context, spawn }) => {
                return spawn("asr", {
                    id: "asrRef",
                    input: {
                        azureAuthorizationToken: context.azureAuthorizationToken,
                        asrDefaultCompleteTimeout: context.settings.asrDefaultCompleteTimeout,
                        asrDefaultNoInputTimeout: context.settings.asrDefaultNoInputTimeout,
                        locale: context.settings.locale,
                        audioContext: context.audioContext,
                        azureRegion: context.settings.azureRegion,
                        azureLanguageCredentials: context.settings.azureLanguageCredentials,
                        speechRecognitionEndpointId: context.settings.speechRecognitionEndpointId,
                    },
                });
            },
        }),
    },
    delays: {
        NEW_TOKEN_INTERVAL: ({ context }) => {
            return context.settings.newTokenInterval || 300000;
        },
    },
}).createMachine({
    context: ({ input }) => ({
        settings: input,
    }),
    id: "speechstate",
    initial: "Active",
    states: {
        Stopped: {
            meta: { view: "stopped" },
            entry: [
                (0, xstate_1.stopChild)("ttsRef"),
                (0, xstate_1.stopChild)("asrRef"),
                (0, xstate_1.assign)({
                    audioContext: undefined,
                    ttsRef: undefined,
                    asrRef: undefined,
                }),
                () => console.debug("[SpSt] destroyed ASR and TTS"),
            ],
        },
        Active: {
            type: "parallel",
            states: {
                AsrTtsSpawner: {
                    initial: "Idle",
                    states: {
                        Idle: { on: { PREPARE: "CreateAudioContext" } },
                        CreateAudioContext: {
                            invoke: {
                                id: "createAudioContext",
                                src: "audioContext",
                                onDone: [
                                    {
                                        guard: ({ context }) => !!context.settings.noPonyfill,
                                        target: "Spawn",
                                        actions: [
                                            (0, xstate_1.assign)(({ event }) => {
                                                return {
                                                    audioContext: event.output,
                                                };
                                            }),
                                        ],
                                    },
                                    {
                                        target: "GenerateToken",
                                        actions: [
                                            (0, xstate_1.assign)(({ event }) => {
                                                return {
                                                    audioContext: event.output,
                                                };
                                            }),
                                        ],
                                    },
                                ],
                            },
                        },
                        GenerateToken: {
                            invoke: {
                                id: "getAuthorizationToken",
                                input: ({ context }) => ({
                                    credentials: context.settings.azureCredentials,
                                }),
                                src: "getToken",
                                onDone: {
                                    target: "Spawn",
                                    actions: (0, xstate_1.assign)(({ event }) => {
                                        return { azureAuthorizationToken: event.output };
                                    }),
                                },
                                onError: {
                                    actions: ({ event }) => console.error("[SpSt.GenerateToken]", event.error),
                                    target: "Fail",
                                },
                            },
                        },
                        Spawn: {
                            entry: [{ type: "spawnTTS" }, { type: "spawnASR" }],
                            after: {
                                NEW_TOKEN_INTERVAL: {
                                    guard: ({ context }) => !context.settings.noPonyfill,
                                    target: "GenerateNewTokens",
                                    actions: ({}) => console.debug("[SpSt] generating new token"),
                                },
                            },
                        },
                        GenerateNewTokens: {
                            invoke: {
                                id: "getNewAuthorizationToken",
                                input: ({ context }) => ({
                                    credentials: context.settings.azureCredentials,
                                }),
                                src: "getToken",
                                onDone: {
                                    actions: [
                                        (0, xstate_1.assign)(({ event }) => {
                                            return { azureAuthorizationToken: event.output };
                                        }),
                                        ({ context, event }) => context.ttsRef.send({
                                            type: "NEW_TOKEN",
                                            value: event.output,
                                        }),
                                        ({ context, event }) => context.asrRef.send({
                                            type: "NEW_TOKEN",
                                            value: event.output,
                                        }),
                                        ({}) => console.debug("[SpSt→TTS] NEW_TOKEN"),
                                        ({}) => console.debug("[SpSt→ASR] NEW_TOKEN"),
                                    ],
                                },
                                onError: {
                                    actions: ({ event }) => console.error("[SpSt.GenerateNewToken]", event.error),
                                    target: "Fail",
                                },
                            },
                            after: {
                                NEW_TOKEN_INTERVAL: {
                                    target: "GenerateNewTokens",
                                    reenter: true,
                                    actions: ({}) => console.debug("[SpSt] generating new token"),
                                },
                            },
                        },
                        Fail: { meta: { view: "error" } },
                    },
                },
                AsrTtsManager: {
                    initial: "Initialize",
                    on: {
                        // ASR_ERROR not implemented
                        TTS_ERROR: {
                            actions: () => console.error("[TTS→SpSt] TTS_ERROR"),
                            target: ".Fail",
                        },
                        ASR_NOINPUT: {
                            actions: [
                                () => console.debug("[ASR→SpSt] NOINPUT"),
                                () => console.info("%cU】*no input*", "font-weight: bold"),
                                (0, xstate_1.sendParent)({ type: "ASR_NOINPUT" }),
                            ],
                        },
                        LISTEN_COMPLETE: {
                            actions: [
                                () => console.debug("[ASR→SpSt] LISTEN_COMPLETE"),
                                (0, xstate_1.sendParent)({
                                    type: "LISTEN_COMPLETE",
                                }),
                            ],
                            target: ".Ready",
                        },
                        STOP: "#speechstate.Stopped",
                    },
                    states: {
                        Initialize: {
                            meta: { view: "not-ready" },
                            on: {
                                TTS_READY: {
                                    actions: () => console.debug("[TTS→SpSt] TTS_READY"),
                                    target: "PreReady",
                                },
                                ASR_READY: {
                                    actions: () => console.debug("[ASR→SpSt] ASR_READY"),
                                    target: "PreReady",
                                },
                            },
                        },
                        PreReady: {
                            meta: { view: "not-ready" },
                            on: {
                                TTS_READY: {
                                    actions: () => console.debug("[TTS→SpSt] TTS_READY"),
                                    target: "Ready",
                                },
                                ASR_READY: {
                                    actions: () => console.debug("[ASR→SpSt] ASR_READY"),
                                    target: "Ready",
                                },
                            },
                        },
                        Ready: {
                            initial: "Idle",
                            entry: [
                                () => console.debug("[SpSt] All ready"),
                                (0, xstate_1.sendParent)({ type: "ASRTTS_READY" }),
                            ],
                            states: {
                                Idle: {
                                    meta: { view: "idle" },
                                    on: {
                                        LISTEN: { target: "WaitForRecogniser" },
                                        SPEAK: [
                                            {
                                                target: "Speaking",
                                            },
                                        ],
                                    },
                                },
                                Speaking: {
                                    invoke: {
                                        id: "visemes",
                                        src: "visemes",
                                        input: {},
                                    },
                                    initial: "Start",
                                    on: {
                                        STOP: {
                                            target: "#speechstate.Stopped",
                                            actions: [
                                                ({}) => console.debug("[SpSt→TTS] STOP"),
                                                ({ context }) => context.ttsRef.send({
                                                    type: "STOP",
                                                }),
                                            ],
                                        },
                                        VISEME: {
                                            actions: [
                                                // ({ event }) =>
                                                //   console.debug("[TTS→SpSt] VISEME", event.value),
                                                (0, xstate_1.sendTo)("visemes", ({ event }) => ({
                                                    type: "VISEME",
                                                    value: event.value,
                                                })),
                                            ],
                                        },
                                        FURHAT_BLENDSHAPES: {
                                            actions: [
                                                ({ event }) => console.debug("[SpSt] FURHAT_BLENDSHAPES", event.value),
                                                (0, xstate_1.sendParent)(({ event }) => ({
                                                    type: "FURHAT_BLENDSHAPES",
                                                    value: event.value,
                                                })),
                                            ],
                                        },
                                        SPEAK_COMPLETE: {
                                            target: "Idle",
                                            actions: [
                                                () => console.debug("[TTS→SpSt] SPEAK_COMPLETE"),
                                                (0, xstate_1.sendParent)({ type: "SPEAK_COMPLETE" }),
                                            ],
                                        },
                                    },
                                    states: {
                                        Start: {
                                            meta: { view: "idle" },
                                            entry: [
                                                ({ event }) => console.debug("[SpSt→TTS] SPEAK", event.value),
                                                ({ context, event }) => context.ttsRef.send({
                                                    type: "SPEAK",
                                                    value: event.value,
                                                }),
                                            ],
                                            on: {
                                                TTS_STARTED: {
                                                    target: "Proceed",
                                                    actions: [
                                                        () => console.debug("[TTS→SpSt] TTS_STARTED"),
                                                        (0, xstate_1.sendParent)({ type: "TTS_STARTED" }),
                                                    ],
                                                },
                                            },
                                        },
                                        Proceed: {
                                            meta: { view: "speaking" },
                                            on: {
                                                CONTROL: {
                                                    target: "Paused",
                                                    actions: [
                                                        () => console.debug("[SpSt→TTS] CONTROL"),
                                                        ({ context }) => context.ttsRef.send({
                                                            type: "CONTROL",
                                                        }),
                                                    ],
                                                },
                                            },
                                        },
                                        Paused: {
                                            meta: { view: "speaking-paused" },
                                            on: {
                                                SPEAK_COMPLETE: {},
                                                CONTROL: {
                                                    target: "Proceed",
                                                    actions: [
                                                        () => console.debug("[SpSt→TTS] CONTROL"),
                                                        ({ context }) => context.ttsRef.send({
                                                            type: "CONTROL",
                                                        }),
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                                WaitForRecogniser: {
                                    meta: { view: "idle" },
                                    entry: [
                                        () => console.debug("[SpSt→ASR] START"),
                                        ({ context, event }) => context.asrRef.send({
                                            type: "START",
                                            value: event.value,
                                        }),
                                    ],
                                    on: {
                                        ASR_STARTED: {
                                            target: "Recognising",
                                            actions: [
                                                () => console.debug("[ASR→SpSt] ASR_STARTED"),
                                                (0, xstate_1.sendParent)({ type: "ASR_STARTED" }),
                                            ],
                                        },
                                    },
                                },
                                Recognising: {
                                    initial: "Proceed",
                                    on: {
                                        STOP: {
                                            target: "#speechstate.Stopped",
                                            actions: [
                                                () => console.debug("[SpSt→ASR] STOP"),
                                                ({ context }) => context.asrRef.send({
                                                    type: "STOP",
                                                }),
                                            ],
                                        },
                                        RECOGNISED: {
                                            actions: [
                                                ({ event }) => console.debug("[ASR→SpSt] RECOGNISED", event.value, event.nluValue),
                                                ({ event }) => console.info("%cU】%s", "font-weight: bold", event.value[0].utterance, event.value[0].confidence),
                                                (0, xstate_1.sendParent)(({ event }) => ({
                                                    type: "RECOGNISED",
                                                    value: event.value,
                                                    nluValue: event.nluValue,
                                                })),
                                            ],
                                        },
                                    },
                                    states: {
                                        Proceed: {
                                            meta: { view: "recognising" },
                                            on: {
                                                CONTROL: {
                                                    target: "Paused",
                                                    actions: [
                                                        () => console.debug("[SpSt→ASR] CONTROL"),
                                                        ({ context }) => context.asrRef.send({
                                                            type: "CONTROL",
                                                        }),
                                                    ],
                                                },
                                            },
                                        },
                                        Paused: {
                                            meta: { view: "recognising-paused" },
                                            on: {
                                                CONTROL: {
                                                    target: "Proceed",
                                                    actions: [
                                                        () => console.debug("[SpSt→ASR] CONTROL"),
                                                        ({ context }) => context.asrRef.send({
                                                            type: "CONTROL",
                                                        }),
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        Fail: { meta: { view: "error" } },
                        Stopped: { meta: { view: "stopped" } },
                    },
                },
            },
        },
    },
});
exports.speechstate = speechstate;
